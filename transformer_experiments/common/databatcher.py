# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/common/databatcher.ipynb.

# %% auto 0
__all__ = ['DataBatcher']

# %% ../../nbs/common/databatcher.ipynb 5
import math

# %% ../../nbs/common/databatcher.ipynb 6
import torch

# %% ../../nbs/common/databatcher.ipynb 7
class DataBatcher:
    """Iterable that will break a long data tensor into batches of samples."""

    def __init__(
        self, data: torch.Tensor, sample_len: int, max_batch_size: int, stride: int
    ):
        assert len(data.shape) == 1, "Data must be a 1D tensor"
        assert len(data) >= sample_len, "Data length must be at least sample_len"

        self.samples = data.unfold(0, sample_len, stride)
        self.sample_len = sample_len
        self.max_batch_size = max_batch_size

    def __len__(self):
        """Returns the number of batches that will be produced."""
        return math.ceil(len(self.samples) / self.max_batch_size)

    def __iter__(self):
        for i in range(0, len(self.samples), self.max_batch_size):
            yield self.samples[i : i + self.max_batch_size]
